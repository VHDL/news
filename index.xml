<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VHDL News</title>
    <link>https://vhdl.github.io/news/</link>
    <description>Recent content on VHDL News</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 05 Feb 2022 15:46:32 +0000</lastBuildDate>
    
	<atom:link href="https://vhdl.github.io/news/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Welcome to VHDL News</title>
      <link>https://vhdl.github.io/news/welcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/welcome/</guid>
      <description>Welcome to VHDL News Hacker News VHDL News is a bit different from other community sites, and we&amp;rsquo;d appreciate it if you&amp;rsquo;d take a minute to read the following as well as the guidelines.
The community of hardware designers is small, open source HDL is a niche compared to other technology communities, and open source VHDL is a subset of the latter. Users/developers are typically lacking time to write proper docs and/or detailed articles to let their projects be known.</description>
    </item>
    
    <item>
      <title>NEORV32: 32-bit RISC-V soft-core CPU and microcontroller-like SoC in VHDL</title>
      <link>https://vhdl.github.io/news/cores/36/</link>
      <pubDate>Sat, 05 Feb 2022 15:46:32 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/cores/36/</guid>
      <description>The NEORV32 Processor is a customizable microcontroller-like system on chip (SoC) that is based on the RISC-V NEORV32 CPU. The project is intended as auxiliary processor in larger SoC designs or as ready-to-go stand-alone custom microcontroller that even fits into a Lattice iCE40 UltraPlus 5k low-power FPGA running at 24 MHz.
Special focus is paid on execution safety to provide defined and predictable behavior at any time. Therefore, the CPU ensures that all memory access are acknowledged and no invalid/malformed instructions are executed.</description>
    </item>
    
    <item>
      <title>CHIPS Alliance Announces Xilinx as its Newest Member </title>
      <link>https://vhdl.github.io/news/past/35/</link>
      <pubDate>Sat, 05 Feb 2022 15:33:11 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/35/</guid>
      <description>Xilinx to continue to drive forward open source FPGA innovation
SAN FRANCISCO, Feb. 3, 2022 – CHIPS Alliance, the leading consortium advancing common and open hardware for interfaces, processors and systems, today announced that Xilinx, Inc. (NASDAQ: XLNX) has joined the CHIPS Alliance organization. Xilinx is a leader in adaptive computing, providing highly-flexible programmable silicon, enabled by a suite of advanced software and tools to drive rapid innovation across a wide span of industries and technologies – from consumer to cars to the cloud.</description>
    </item>
    
    <item>
      <title>OSVVM &amp; UVVM: Differences and Unification</title>
      <link>https://vhdl.github.io/news/articles/33/</link>
      <pubDate>Sat, 30 Oct 2021 02:23:50 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/33/</guid>
      <description>As the developer of Open Source VHDL Verification Methodology (OSVVM) , I would like to invite the Universal VHDL Verification Methodology (UVVM) community to join us in using and developing OSVVM.
At this point OSVVM and UVVM are largely duplicating what each other is doing. This wastes valuable time and resources that could be better spent with all of us working toward a common goal. Lets be honest, the SystemVerilog community went though these same growing pains when Siemens, Cadence, and Synopsys came together to unify URM (Cadence), AVM (Siemens), OVM (Cadence + Siemens), and VMM (Synopsys) into UVM.</description>
    </item>
    
    <item>
      <title>What Can GitHub Tell Us About the HDL Industry? (Part 5)</title>
      <link>https://vhdl.github.io/news/past/32/</link>
      <pubDate>Wed, 27 Oct 2021 22:36:39 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/32/</guid>
      <description>The fifth part was published, titled Wilson Study Comparison:
 Part 5 of this series compares our GitHub-based research on the verification frameworks used for VHDL designs with the findings in the Wilson Research Group functional verification study. Our analysis shows that the derived GitHub data confirms the Wilson study results for UVM, OSVVM, and UVVM but it also shows that the Wilson study misses a large part of the overall picture by not including all commonly used frameworks.</description>
    </item>
    
    <item>
      <title>Joint ICTP, SAIFR and UNESP School on Systems-on-Chip, Embedded Microcontrollers and their Applications in Research and Industry</title>
      <link>https://vhdl.github.io/news/articles/31/</link>
      <pubDate>Thu, 21 Oct 2021 15:39:55 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/31/</guid>
      <description>@rodrigomelo9:
 Happy to help again in an Abdus Salam International Centre for Theoretical Physics (ICTP) workshop talking about #VHDL and #FOSS for #FPGA
  Links to slides (and coming soon the recording) of the mini crash course about VHDL:
 http://indico.ictp.it/event/9644/session/2/contribution/11/material/slides/ http://indico.ictp.it/event/9644/session/3/contribution/14/material/slides/   </description>
    </item>
    
    <item>
      <title>Open Source Verification Bundle (OSVB)</title>
      <link>https://vhdl.github.io/news/show/30/</link>
      <pubDate>Wed, 20 Oct 2021 01:13:27 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/show/30/</guid>
      <description>OSVB gathers the most popular open source verification Frameworks and Methodologies for VHDL and System Verilog: cocotb, OSVVM, SVUnit, UVVM, VUnit. Each of them was created and is maintained by different groups of people, in different contexts and with different backgrounds. All evolved into standalonish solutions involving build and test execution helpers, along with verification components for standard interfaces. However, each project prioritised certain features, while others didn’t receive so much care.</description>
    </item>
    
    <item>
      <title>MINGW-packages for Electronic Design Automation (EDA)</title>
      <link>https://vhdl.github.io/news/tools/27/</link>
      <pubDate>Tue, 19 Jan 2021 06:41:45 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/tools/27/</guid>
      <description>This repository contains references to package recipes (PKGBUILD files) for electronic design automation (EDA) tools/projects to be built as MinGW-w64 targets on MSYS2 (MINGW32 and MINGW64). The main purpose is coordination of contributions for upstreaming all tools/projects to official MSYS2 repositories, and having them updated periodically. The default package manager (pacman) allows installing multiple tools at once through group mingw-w64-*-eda (i686|x86_64) . Find further details, along with usage and contribution guidelines at hdl.</description>
    </item>
    
    <item>
      <title>Mixed HDL on Fomu, with GHDL and Yosys</title>
      <link>https://vhdl.github.io/news/articles/26/</link>
      <pubDate>Wed, 02 Dec 2020 05:34:29 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/26/</guid>
      <description>Section Mixed HDL on Fomu of the FPGA Tomu Workshop contains Makefile based examples for synthesising mixed language (VHDL and Verilog) designs using open source tooling. Find sources at im-tomu/fomu-workshop: mixed-hdl/blink.
NOTE: The workshop uses im-tomu/fomu-toolchain, which is based on open-tool-forge/fpga-toolchain. Hence, makefiles expect ghdl-yosys-plugin to be built into Yosys. Other packaging solutions can be used too, but using ghdl-yosys-plugin as a module requires adding -m ghdl to the yosys call in the Makefile.</description>
    </item>
    
    <item>
      <title>VHDL/Verilog Cryptography cores incl. co-simulation with openSSL through GHDLs VHPIdirect</title>
      <link>https://vhdl.github.io/news/cores/24/</link>
      <pubDate>Mon, 30 Nov 2020 19:50:15 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/cores/24/</guid>
      <description>Cryptography IP-cores &amp;amp; tests written in VHDL / Verilog.
The components in this repository are not intended as productional code. They serve as proof of concept, for example how to implement a pipeline using only (local) variables instead of (global) signals. Furthermore they were used how to do a VHDL-to-Verilog conversion for learning purposes.
The testbenches to verify AES and CTR-AES are examples how useful GHDLs VHPIdirect is. They use openSSL as reference models to check the correctness of the VHDL implementation.</description>
    </item>
    
    <item>
      <title>Building and deploying container images for open source EDA</title>
      <link>https://vhdl.github.io/news/tools/23/</link>
      <pubDate>Mon, 23 Nov 2020 09:09:05 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/tools/23/</guid>
      <description>hdl/containers: README.md
This repository contains scripts and GitHub Actions (GHA) YAML workflows for building, testing and deploying OCI images (aka Docker images) including open source EDA tooling. All of them are pushed to hub.docker.com/u/hdlc. See hdl.github.io/containers for further details and contributing guidelines.
  ghdl/docker: DEPRECATED.md
Some images related to synthesis and PnR were moved to hdl/containers and hub.docker.com/u/hdlc. Some of those are now mirrored to ghdl/synth:* for backwards compatibility, but are no longer built in this repository.</description>
    </item>
    
    <item>
      <title>VHDL needs you!</title>
      <link>https://vhdl.github.io/news/past/22/</link>
      <pubDate>Fri, 13 Nov 2020 14:39:38 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/22/</guid>
      <description>Are you familiar or experienced with LaTeX? In preparation for the next revision, the VHDL Analysis and Standarisation Group (VASG) decided to migrate the sources of the IEEE Std 1076-2019 Language Reference Manual (LRM) from a closed source binary file based tool (Adobe FrameMaker) to an open source text based solution (LaTeX); together with using a forge (gitlab.com/IEEE-P1076) for coordinating and keeping track of the modifications.
Although many people think that the standards community is driven by vendors, that is a mistake noawadays.</description>
    </item>
    
    <item>
      <title>Microwatt and GHDL - An Open Hardware CPU written in VHDL, Synthesized with Open Source Tools</title>
      <link>https://vhdl.github.io/news/cores/21/</link>
      <pubDate>Tue, 27 Oct 2020 06:45:43 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/cores/21/</guid>
      <description>Microwatt and GHDL - An Open Hardware CPU written in VHDL, Synthesized with Open Source Tools
Speakers: Anton Blanchard, IBM &amp;amp; Tristan Gingold, CERN
Microwatt is a 64 bit POWER OpenISA soft processor, written in VHDL. Over time it has grown from supporting Micropython, to Zephyr and most recently Linux.
From its original inception, Microwatt has relied heavily on GHDL, the Open Source VHDL simulator. GHDL has very recently added synthesis support and together with Yosys and Nextpnr allows for a completely open source toolchain for FPGAs.</description>
    </item>
    
    <item>
      <title>Microwatt and GHDL - An Open Hardware CPU written in VHDL, Synthesized with Open Source Tools</title>
      <link>https://vhdl.github.io/news/tools/21/</link>
      <pubDate>Tue, 27 Oct 2020 06:45:43 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/tools/21/</guid>
      <description>Microwatt and GHDL - An Open Hardware CPU written in VHDL, Synthesized with Open Source Tools
Speakers: Anton Blanchard, IBM &amp;amp; Tristan Gingold, CERN
Microwatt is a 64 bit POWER OpenISA soft processor, written in VHDL. Over time it has grown from supporting Micropython, to Zephyr and most recently Linux.
From its original inception, Microwatt has relied heavily on GHDL, the Open Source VHDL simulator. GHDL has very recently added synthesis support and together with Yosys and Nextpnr allows for a completely open source toolchain for FPGAs.</description>
    </item>
    
    <item>
      <title>Structured constraint files for HDL designs targeting FPGA boards </title>
      <link>https://vhdl.github.io/news/tools/20/</link>
      <pubDate>Thu, 22 Oct 2020 21:52:32 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/tools/20/</guid>
      <description>Any HDL design targeting FPGA boards needs constraint files in a vendor/tool specific format. Constraints are typically tied to the board and the interfaces, but not to the actual design. Therefore, copying them is inefficient and increases the maintenance burden of projects including multiple designs to be tested on several boards. This repository provides constraint definitions in a standardised and distributed format, fot decoupling board details from design sources.</description>
    </item>
    
    <item>
      <title>What are the chances of having sb_ice40_components_syn.vhd freely distributed for the benefit of the community?</title>
      <link>https://vhdl.github.io/news/past/19/</link>
      <pubDate>Fri, 09 Oct 2020 14:54:20 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/19/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker dashboard (on Windows and Mac OS)</title>
      <link>https://vhdl.github.io/news/tools/18/</link>
      <pubDate>Fri, 09 Oct 2020 08:48:50 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/tools/18/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to convert vhdl to other formats</title>
      <link>https://vhdl.github.io/news/past/17/</link>
      <pubDate>Mon, 28 Sep 2020 15:23:01 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/17/</guid>
      <description>I made a list of &amp;ldquo;How to convert vhdl to &amp;hellip;&amp;rdquo; in hopes it gets indexed by the search engines. All commands are similar, they are listed so common search phrases get indexed.
The format translation can be done with the yosys&amp;rsquo;s write_*commands. Therefore, in order to them to work, ghdl, yosys and ghdl-yosys-plugin have to be installed (make sure they are updated).
In the following examples, ghdl is being used, in what I believe, is the most straightforward way.</description>
    </item>
    
    <item>
      <title>Combining VUnit tests with cocotb components</title>
      <link>https://vhdl.github.io/news/show/16/</link>
      <pubDate>Mon, 28 Sep 2020 06:09:01 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/show/16/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SusanaCanel - Proyectos VHDL</title>
      <link>https://vhdl.github.io/news/articles/15/</link>
      <pubDate>Fri, 18 Sep 2020 03:59:05 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/15/</guid>
      <description>Youtube channel SusanaCanel contains 100+ videos (in spanish) about learning VHDL. The GitHub repository contains the sources used in the videos.</description>
    </item>
    
    <item>
      <title>What Can GitHub Tell Us About the HDL Industry? (Part 4)</title>
      <link>https://vhdl.github.io/news/past/14/</link>
      <pubDate>Fri, 18 Sep 2020 00:54:44 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/14/</guid>
      <description>The fourth part was published:
 In part 3 of our GitHub study we presented the number of users on GitHub doing their VHDL verification with one or more of the analyzed frameworks: VUnit, OSVVM, UVVM, UVM, and cocotb. The results, especially that for the professional users, came as a bit of a surprise which lead to interesting discussions in the comments of the post. Can a study of professional users on GitHub really say something about professional practices behind company walls?</description>
    </item>
    
    <item>
      <title>Open Source Formal Verification in VHDL</title>
      <link>https://vhdl.github.io/news/articles/13/</link>
      <pubDate>Mon, 07 Sep 2020 09:57:20 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/13/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What Can GitHub Tell Us About the HDL Industry? (Part 3)</title>
      <link>https://vhdl.github.io/news/past/11/</link>
      <pubDate>Wed, 02 Sep 2020 21:33:51 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/11/</guid>
      <description>The third part was published:
 In the second article about our GitHub study we analyzed the popularity of standard verification frameworks in VHDL repositories. This time we extend on those findings by analyzing the Git history of those repositories to find the number of users and examine how that changed over time.

Looking at users rather than repositories doesn’t have a drastic effect to the overall picture. VUnit is still the most commonly used verification framework on GitHub.</description>
    </item>
    
    <item>
      <title>Learning FPGA programming, key points for a software developer</title>
      <link>https://vhdl.github.io/news/articles/10/</link>
      <pubDate>Tue, 01 Sep 2020 16:45:34 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/10/</guid>
      <description> dev.to/targeted  Learning FPGA programming, key points for a software developer (part 1, the time)  Learning FPGA programming, key points for a software developer (part 2, registered logic) Learning FPGA programming, key points for a software developer (part 3, code patterns and inferred behavior)     </description>
    </item>
    
    <item>
      <title>What’s new in VHDL-2019 - VHDLwhiz</title>
      <link>https://vhdl.github.io/news/articles/9/</link>
      <pubDate>Fri, 28 Aug 2020 17:27:03 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>First VHDL-2019 examples on EDA playground</title>
      <link>https://vhdl.github.io/news/past/8/</link>
      <pubDate>Sat, 22 Aug 2020 20:37:41 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/8/</guid>
      <description>First examples of VHDL-2019 on EDA playground supported by Riviera Pro:
 some of the new features of the std.env package private and alias in protected types  </description>
    </item>
    
    <item>
      <title>Create your own VVC for UVVM</title>
      <link>https://vhdl.github.io/news/articles/7/</link>
      <pubDate>Wed, 19 Aug 2020 12:13:59 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What Can GitHub Tell Us About the HDL Industry? (Part 2)</title>
      <link>https://vhdl.github.io/news/past/6/</link>
      <pubDate>Wed, 19 Aug 2020 07:38:22 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/6/</guid>
      <description>The second article/chapter was published:
 In the first article about our GitHub study we focused on the presence of tests in HDL repositories. This time we&amp;rsquo;re looking into what standard verification frameworks are being used. The main conclusions are that:
 VUnit is the most used verification framework for professional and academic VHDL repositories on GitHub. Most repositories using more than one framework use VUnit and OSVVM. More than half of the repositories using OSVVM also use VUnit.</description>
    </item>
    
    <item>
      <title>Examples of using PSL for functional and formal verification of VHDL with GHDL (and SymbiYosys) </title>
      <link>https://vhdl.github.io/news/show/5/</link>
      <pubDate>Tue, 18 Aug 2020 16:31:26 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/show/5/</guid>
      <description>A collection of examples of using PSL (Property Specification Language) for functional and formal verification of VHDL designs with GHDL (and Yosys / SymbiYosys).
This is a project with the purpose to get a current state of PSL implementation in GHDL. It probably will find unsupported PSL features, incorrect implemented features or simple bugs like GHDL crashs. It is also intended for experiments with PSL when learning the language. You can play around with the examples, as they are pretty simple.</description>
    </item>
    
    <item>
      <title>Addressing VHDL Verification Challenges with OSVVM</title>
      <link>https://vhdl.github.io/news/articles/4/</link>
      <pubDate>Tue, 18 Aug 2020 15:03:07 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/4/</guid>
      <description>An introduction to the capabilities of OSVVM utility and verification component libraries.</description>
    </item>
    
    <item>
      <title>What Can GitHub Tell Us About the HDL Industry? (Part 1)</title>
      <link>https://vhdl.github.io/news/past/3/</link>
      <pubDate>Tue, 18 Aug 2020 14:51:44 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/past/3/</guid>
      <description>During the last few years we’ve had many discussions within the VUnit community where we failed to reach a conclusion because we don’t fully know how people at large are working with design and verification. Some questions arise frequently:
 How is verification done? What frameworks are used? Are they used together? What are the dominant coding styles? Would people align to those if they knew?  Knowing these would help the development of VUnit [1]; where do we put our efforts?</description>
    </item>
    
    <item>
      <title>What Can GitHub Tell Us About the HDL Industry?</title>
      <link>https://vhdl.github.io/news/articles/2/</link>
      <pubDate>Tue, 18 Aug 2020 14:51:02 +0000</pubDate>
      
      <guid>https://vhdl.github.io/news/articles/2/</guid>
      <description>During the last few years we’ve had many discussions within the VUnit community where we failed to reach a conclusion because we don’t fully know how people at large are working with design and verification. Some questions arise frequently:
 How is verification done? What frameworks are used? Are they used together? What are the dominant coding styles? Would people align to those if they knew?  Knowing these would help the development of VUnit [1]; where do we put our efforts?</description>
    </item>
    
  </channel>
</rss>